// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

interface ILockedTokenContract {
    function balanceOf(address _account) external view returns (uint256);
}

interface IVestedTokenContract {
    function balanceOf(address _account) external view returns (uint256);
}

interface IStakingContract {
    function balanceOf(address _account) external view returns (uint256);
}

interface ITokenFactory {
    function getGovernanceContract() external view returns (address);
}

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenFactory is Ownable, ReentrancyGuard {
    uint256 public creationFee;
    address payable public feeRecipient;
    address private governanceContract;
    mapping(address => address[]) public tokensCreatedBy;
    error UnauthorizedCaller();

    event TokenCreated(
        address indexed creator,
        address indexed tokenAddress,
        string tokenName,
        string tokenSymbol,
        uint256 indexed decimals,
        uint256 totalSupply
    );
    
    constructor(uint256 _creationFee, address payable _feeRecipient, address _governanceContract) {
        require(_feeRecipient != address(0), "INVALID_RECIPIENT");
        creationFee = _creationFee;
        feeRecipient = _feeRecipient;
        governanceContract = _governanceContract;
    }

    modifier onlyGovernance() {
        if (_msgSender() != governanceContract) revert UnauthorizedCaller();
        _;
    }

    function updateCreationFee(uint256 _newFee) external onlyGovernance {
        creationFee = _newFee;
    }

    function updateFeeRecipient(address payable _newRecipient) external onlyGovernance {
        require(_newRecipient != address(0), "INVALID_RECIPIENT");
        feeRecipient = _newRecipient;
    }

    function updateGovContract(address _newContract) external onlyGovernance {
        require(_newContract != address(0), "INVALID_RECIPIENT");
        governanceContract = _newContract;
    }

    function getGovernanceContract() external view returns (address) {
        return governanceContract;
    }

    function createToken(
        string memory name,
        string memory symbol,
        uint256 maximumSupply,
        uint8 decimals,
        uint256 buyTax,
        uint256 sellTax,
        uint256 burnTax,
        address treasury
        ) public payable nonReentrant {
        require(msg.value == creationFee, "INCORRECT_FEES");
        require(buyTax <= 10 && sellTax <= 10 && burnTax <= 10, "TAX SHOULD BE <= 10%");
        require(treasury != address(0), "INVALID_TREASURY");
        feeRecipient.transfer(msg.value);

        uint256 supplyWithDecimals = maximumSupply * (10 ** uint256(decimals));
        SC20Token mintToken = new SC20Token(
            name,
            symbol,
            supplyWithDecimals,
            decimals,
            buyTax,
            sellTax,
            burnTax,
            _msgSender(),
            treasury,
            address(this)
        );
        mintToken.transferOwnership(_msgSender());
        tokensCreatedBy[_msgSender()].push(address(mintToken));
        emit TokenCreated(_msgSender(), address(mintToken), name, symbol, decimals, supplyWithDecimals);
    }

    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }

    function getTokensCreatedBy(address creator) public view returns (address[] memory) {
        return tokensCreatedBy[creator];
    }

}

// SC20Token extends the ERC20 implementation from OpenZeppelin and adds a burn function.
contract SC20Token is ERC20, ERC20Burnable, Ownable, ReentrancyGuard {

    uint256 private _maximumSupply;
    uint8 private _customDecimals;
    bool private _mintingEnabled = true; // Minting is enabled by default
    address[] public lockedTokenContracts;
    address[] public vestedTokenContracts;
    address[] public stakingTokenContracts;
    uint256 public buyTax;
    uint256 public sellTax;
    address public treasury;
    uint256 public burnTax;
    address private tokenFactoryAddress;
    
    error UnauthorizedCaller();
    
    event MintingDisabled();
    event TreasuryUpdate(address indexed newTreasury);
    event BuyTaxUpdated(uint256 _newTaxPercent);
    event SellTaxUpdated(uint256 _newTaxPercent);
    event BurnTaxUpdated(uint256 _newTaxPercent);
    event BuyTaxTransferred(address indexed from, address indexed to, uint256 taxAmount);
    event SellTaxTransferred(address indexed from, address indexed to, uint256 taxAmount);
    event LockedTokenContractAdded(address indexed newContract);
    event LockedTokenContractRemoved(address indexed removedContract);
    event VestedTokenContractAdded(address indexed newContract);
    event VestedTokenContractRemoved(address indexed removedContract);
    event StakingTokenContractAdded(address indexed newContract);
    event StakingTokenContractRemoved(address indexed removedContract);
    event TokenMinted(address indexed to, uint256 amount);
    event LiquidityPoolAdded(address indexed pool);
    event LiquidityPoolRemoved(address indexed pool);

    mapping(address => bool) private isLockedTokenContractMapping;
    mapping(address => bool) private isVestedTokenContractMapping;
    mapping(address => bool) private isStakingTokenContractMapping;
    mapping(address => bool) private isLiquidityPool;

    constructor(
        string memory name,
        string memory symbol,
        uint256 maxSupply,
        uint8 Decimals,
        uint256 _buyTax,
        uint256 _sellTax,
        uint256 _burnTax,
        address tokenOwner,
        address _treasury,
        address _tokenFactoryAddress
    ) ERC20(name, symbol) {
        require(tokenOwner != address(0), "INVALID_OWNER");
        require(_treasury != address(0), "INVALID_TREASURY");
        require(_buyTax <= 10 && _sellTax <= 10 && _burnTax <= 10, "TAX SHOULD BE <= 10%");
        
        tokenFactoryAddress = _tokenFactoryAddress;
        treasury = _treasury;
        _customDecimals = Decimals;
        _maximumSupply = maxSupply;
        _mint(tokenOwner, maxSupply);
        buyTax = _buyTax;
        sellTax = _sellTax;
        burnTax = _burnTax;
    }

    modifier onlyGovernance() {
        address governanceContract = ITokenFactory(tokenFactoryAddress).getGovernanceContract();
        if (_msgSender() != governanceContract) revert UnauthorizedCaller();
        _;
    }

    function isLockedTokenContract(address _address) external view returns (bool) {
        return isLockedTokenContractMapping[_address];
    }

    function isVestedTokenContract(address _address) external view returns (bool) {
        return isVestedTokenContractMapping[_address];
    }

    function isStakingTokenContract(address _address) external view returns (bool) {
        return isStakingTokenContractMapping[_address];
    }

    function isLiquidityPoolAddress(address _pool) external view returns (bool) {
        return isLiquidityPool[_pool];
    }

    function addLockedTokenContract(address _address) public onlyOwner {
        require(_address != address(0), "INVALID_ADDRESS");
        for (uint i = 0; i < lockedTokenContracts.length; i++) {
            require(lockedTokenContracts[i] != _address, "ADDRESS_ALREADY_ADDED");
        }
        lockedTokenContracts.push(_address);
        emit LockedTokenContractAdded(_address);
    }

    // Function to remove a locked token contract address
    function removeLockedTokenContract(address _address) external onlyGovernance {
        int index = _findIndex(lockedTokenContracts, _address);
        require(index != -1, "ADDRESS_NOT_FOUND");
        _removeAtIndex(lockedTokenContracts, uint(index));
        emit LockedTokenContractRemoved(_address);
    }

    function addVestedTokenContract(address _address) public onlyOwner {
        require(_address != address(0), "INVALID_ADDRESS");
        for (uint i = 0; i < vestedTokenContracts.length; i++) {
            require(vestedTokenContracts[i] != _address, "ADDRESS_ALREADY_ADDED");
        }
        vestedTokenContracts.push(_address);
        emit VestedTokenContractAdded(_address);
    }

    // Remove a vested token contract address
    function removeVestedTokenContract(address _address) external onlyGovernance {
        int index = _findIndex(vestedTokenContracts, _address);
        require(index != -1, "ADDRESS_NOT_FOUND");
        _removeAtIndex(vestedTokenContracts, uint(index));
        emit VestedTokenContractRemoved(_address);
    }

    // Add a staking token contract address
    function addStakingTokenContract(address _address) public onlyOwner {
        require(_address != address(0), "INVALID_ADDRESS");
        for (uint i = 0; i < stakingTokenContracts.length; i++) {
            require(stakingTokenContracts[i] != _address, "ADDRESS_ALREADY_ADDED");
        }
        stakingTokenContracts.push(_address);
        emit StakingTokenContractAdded(_address);
    }

    // Remove a staking token contract address
    function removeStakingTokenContract(address _address) external onlyGovernance {
        int index = _findIndex(stakingTokenContracts, _address);
        require(index != -1, "ADDRESS_NOT_FOUND");
        _removeAtIndex(stakingTokenContracts, uint(index));
        emit StakingTokenContractRemoved(_address);
    }

    // Helper function to find index of an address in an array
    function _findIndex(address[] storage array, address _address) private view returns (int) {
        for (uint i = 0; i < array.length; i++) {
            if (array[i] == _address) {
                return int(i);
            }
        }
        return -1; // Not found
    }

    // Helper function to remove an address at a specific index in an array
    function _removeAtIndex(address[] storage array, uint index) private {
        require(index < array.length, "INDEX_OUT_OF_BOUNDS");
        array[index] = array[array.length - 1];
        array.pop();
    }
    
    function modifyBuyTax(uint256 _newTaxPercent) external onlyGovernance {
        require(_newTaxPercent <= 20, "NEW TAX SHOULD BE <= 20%");
        buyTax = _newTaxPercent;
        emit BuyTaxUpdated(_newTaxPercent);
    }

    function modifySellTax(uint256 _newTaxPercent) external onlyGovernance {
        require(_newTaxPercent <= 20, "NEW TAX SHOULD BE <= 20%");
        sellTax = _newTaxPercent;
        emit SellTaxUpdated(_newTaxPercent);
    }

    function modifyBurnTax(uint256 _newTaxPercent) external onlyGovernance {
        require(_newTaxPercent <= 20, "NEW TAX SHOULD BE <= 20%");
        burnTax = _newTaxPercent;
        emit BurnTaxUpdated(_newTaxPercent);
    }

    function updateTreasury(address _treasury) external onlyGovernance {
        require(_treasury != address(0), "INVALID_TREASURY");
        treasury = _treasury;
        emit TreasuryUpdate(_treasury);
    }

    function addLiquidityPool(address _pool) public onlyOwner {
        require(_pool != address(0), "INVALID_ADDRESS");
        isLiquidityPool[_pool] = true;
        emit LiquidityPoolAdded(_pool);
    }

    function removeLiquidityPool(address _pool) external onlyGovernance {
        isLiquidityPool[_pool] = false;
        emit LiquidityPoolRemoved(_pool);
    }
    
    function mint(address _to, uint256 _amount) external onlyGovernance nonReentrant {
        require(_mintingEnabled, "MINTING_DISABLED");
        require(totalSupply() + _amount <= _maximumSupply, "CANNOT EXCEED MAXIMUM SUPPLY");
        _mint(_to, _amount);
        emit TokenMinted(_to, _amount);
    }

    function disableMinting() external onlyGovernance {
        _mintingEnabled = false;
        emit MintingDisabled();
    }

    // Override the _transfer function to include fee logic
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        uint256 taxAmount = 0;
        uint256 burnAmount = 0;
        
    // Check and apply buy fee and/or burn fee
        if (_isBuying(from)) {
            if (buyTax > 0) {
                taxAmount = (amount * buyTax) / 100;
                super._transfer(from, treasury, taxAmount);
            }
            if (burnTax > 0) {
            burnAmount = (amount * burnTax) / 100;
            _burn(from, burnAmount);
            }
            emit BuyTaxTransferred(from, treasury, taxAmount);
            amount -= (taxAmount + burnAmount);
        }
        
    // Check and apply sell fee and/or burn fee
        if (_isSelling(to)) {
            if (sellTax > 0) {
            taxAmount = (amount * sellTax) / 100;
            super._transfer(from, treasury, taxAmount);
            }
        if (burnTax > 0) {
            burnAmount = (amount * burnTax) / 100;
            _burn(from, burnAmount);
        }
            emit SellTaxTransferred(from, treasury, taxAmount);
            amount -= (taxAmount + burnAmount);
        }

        super._transfer(from, to, amount);
    }

    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }
    
    function maximumSupply() public view returns (uint256) {
        return _maximumSupply;
    }

    function circulatingSupply() public view returns (uint256) {
        uint256 lockedBalanceTotal = 0;
        for (uint i = 0; i < lockedTokenContracts.length; i++) {
            lockedBalanceTotal += ILockedTokenContract(lockedTokenContracts[i]).balanceOf(address(this));
        }

        uint256 vestedBalanceTotal = 0;
        for (uint i = 0; i < vestedTokenContracts.length; i++) {
            vestedBalanceTotal += IVestedTokenContract(vestedTokenContracts[i]).balanceOf(address(this));
        }

        uint256 stakingBalanceTotal = 0;
        for (uint i = 0; i < stakingTokenContracts.length; i++) {
            stakingBalanceTotal += IStakingTokenContract(stakingTokenContracts[i]).balanceOf(address(this));
        }

        // Subtracting the total of locked, vested, and staking balances from the total supply
        return totalSupply() - (lockedBalanceTotal + vestedBalanceTotal + stakingBalanceTotal);
    }

    function getGovernanceContractAddress() public view returns (address) {
        return ITokenFactory(tokenFactoryAddress).getGovernanceContract();
    }

    function decimals() public view virtual override returns (uint8) {
        return _customDecimals;
    }

    function mintStatus() public view returns (bool) {
        return _mintingEnabled;
    }

    function _isBuying(address from) private view returns (bool) {
        return isLiquidityPool[from];
    }

    function _isSelling(address to) private view returns (bool) {
        return isLiquidityPool[to];
    }

}
